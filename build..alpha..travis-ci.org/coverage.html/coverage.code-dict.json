{"/home/travis/build/npmtest/node-npmtest-ember-plupload/test.js":"/* istanbul instrument in package npmtest_ember_plupload */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-plupload/lib.npmtest_ember_plupload.js":"/* istanbul instrument in package npmtest_ember_plupload */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_plupload = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_plupload = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-plupload/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-plupload && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_plupload */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_plupload\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_plupload.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_plupload.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_plupload.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_plupload.__dirname + '/lib.npmtest_ember_plupload.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-plupload/node_modules/ember-plupload/index.js":"/* jshint node: true */\n'use strict';\n\nmodule.exports = {\n  name: 'ember-plupload',\n\n  included: function (app) {\n    this._super.included(app);\n    var config = this.app.project.config(app.env) || {};\n    var addonConfig = config[this.name] || {};\n    var debugMode = addonConfig.debug;\n\n    if (debugMode === undefined) {\n      debugMode = process.env.EMBER_ENV === 'development';\n    }\n\n    if (!process.env.EMBER_CLI_FASTBOOT) {\n      if (debugMode) {\n        app.import('bower_components/plupload/js/moxie.js');\n        app.import('bower_components/plupload/js/plupload.dev.js');\n      } else {\n        app.import('bower_components/plupload/js/plupload.full.min.js');\n      }\n    }\n    app.import('bower_components/plupload/js/Moxie.swf', {\n      destDir: 'assets'\n    });\n    app.import('bower_components/plupload/js/Moxie.xap', {\n      destDir: 'assets'\n    });\n    app.import('bower_components/dinosheets/dist/dinosheets.amd.js', {\n      exports: {\n        'dinosheets': ['default']\n      }\n    });\n\n    app.import('vendor/styles/ember-plupload.css');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-plupload/node_modules/ember-plupload/testem.js":"/*jshint node:true*/\nmodule.exports = {\n  \"framework\": \"qunit\",\n  \"test_page\": \"tests/index.html?hidepassed\",\n  \"disable_watching\": true,\n  \"launch_in_ci\": [\n    \"PhantomJS\"\n  ],\n  \"launch_in_dev\": [\n    \"PhantomJS\",\n    \"Chrome\"\n  ]\n};\n","/home/travis/build/npmtest/node-npmtest-ember-plupload/node_modules/ember-plupload/config/ember-try.js":"/*jshint node:true*/\nmodule.exports = {\n  scenarios: [\n    {\n      name: 'default',\n      bower: {\n        dependencies: { }\n      }\n    },\n    {\n      name: 'ember-1-13',\n      bower: {\n        dependencies: {\n          'ember': '~1.13.0'\n        },\n        resolutions: {\n          'ember': '~1.13.0'\n        }\n      }\n    },\n    {\n      name: 'ember-release',\n      bower: {\n        dependencies: {\n          'ember': 'components/ember#release'\n        },\n        resolutions: {\n          'ember': 'release'\n        }\n      }\n    },\n    {\n      name: 'ember-beta',\n      bower: {\n        dependencies: {\n          'ember': 'components/ember#beta'\n        },\n        resolutions: {\n          'ember': 'beta'\n        }\n      }\n    },\n    {\n      name: 'ember-canary',\n      bower: {\n        dependencies: {\n          'ember': 'components/ember#canary'\n        },\n        resolutions: {\n          'ember': 'canary'\n        }\n      }\n    }\n  ]\n};\n","/home/travis/build/npmtest/node-npmtest-ember-plupload/node_modules/ember-plupload/config/environment.js":"/*jshint node:true*/\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-plupload/node_modules/ember-plupload/config/release.js":"/* jshint node:true */\n// var RSVP = require('rsvp');\n\n// For details on each option run `ember help release`\nmodule.exports = {\n  // local: true,\n  // remote: 'some_remote',\n  // annotation: \"Release %@\",\n  // message: \"Bumped version to %@\",\n  // manifest: [ 'package.json', 'bower.json', 'someconfig.json' ],\n  // strategy: 'date',\n  // format: 'YYYY-MM-DD',\n  // timezone: 'America/Los_Angeles',\n  //\n  // beforeCommit: function(project, versions) {\n  //   return new RSVP.Promise(function(resolve, reject) {\n  //     // Do custom things here...\n  //   });\n  // }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-plupload/node_modules/ember-plupload/addon/components/pl-uploader.js":"import Ember from 'ember';\nimport DinoSheet from 'dinosheets';\nimport trim from '../system/trim';\nimport w from '../computed/w';\n\nvar get = Ember.get;\nvar set = Ember.set;\nvar keys = Object.keys;\n\nvar bind = Ember.run.bind;\nvar computed = Ember.computed;\n\nvar isDragAndDropSupported = (function () {\n  var supported = null;\n  return function (runtimes) {\n    if (runtimes.indexOf('html5') === -1) {\n      return false;\n    }\n\n    if (supported == null) {\n      supported = 'draggable' in document.createElement('span');\n    }\n    return supported;\n  };\n}());\n\nvar styleSheet;\nvar sharedStyleSheet = function () {\n  if (styleSheet == null) {\n    styleSheet = new DinoSheet();\n  }\n  return styleSheet;\n};\n\nvar slice = Array.prototype.slice;\n\nexport default Ember.Component.extend({\n  classNames: ['pl-uploader'],\n\n  name: null,\n\n  'for-dropzone': null,\n\n  onfileadd: null,\n  onerror: null,\n\n  uploader: Ember.inject.service(),\n\n  /**\n    A cascading list of runtimes to fallback on to\n    for uploading files with.\n\n    @property runtimes\n    @type String[]\n    @default ['html5', 'html4', 'flash', 'silverlight']\n   */\n  runtimes: w(['html5', 'html4', 'flash', 'silverlight']),\n  extensions: w(),\n\n  'max-file-size': 0,\n  'no-duplicates': false,\n\n  multiple: true,\n  'unique-names': false,\n  'send-browser-cookies': false,\n  'send-file-name': null,\n\n  dropzone: computed('for-dropzone', {\n    get() {\n      var dropzone = {};\n      var id = get(this, 'for-dropzone') || 'dropzone-for-' + get(this, 'elementId');\n      dropzone.enabled = false;\n\n      if (isDragAndDropSupported(get(this, 'runtimes'))) {\n        dropzone.enabled = true;\n        dropzone.id = id;\n        dropzone.data = null;\n        dropzone['drag-and-drop'] = {\n          'dropzone-id': id,\n          'drag-data': null\n        };\n      }\n      return dropzone;\n    }\n  }),\n\n  config: computed({\n    get() {\n      var config = {\n        url: true, // Required to init plupload\n        browse_button: get(this, 'for'),\n        filters: {\n          max_file_size: get(this, 'max-file-size'),\n          prevent_duplicates: get(this, 'no-duplicates')\n        },\n\n        multi_selection: get(this, 'multiple'),\n\n        runtimes: get(this, 'runtimes').join(','),\n        container: get(this, 'elementId'),\n        flash_swf_url: this.BASE_URL + 'Moxie.swf',\n        silverlight_xap_url: this.BASE_URL + 'Moxie.xap',\n        unique_names: get(this, 'unique-names'),\n        required_features: {}\n      };\n\n      if (get(this, 'send-browser-cookies')) {\n        config.required_features.send_browser_cookies = true;\n      }\n\n      if (get(this, 'send-file-name') != null) {\n        config.send_file_name = get(this, 'send-file-name');\n      }\n\n      var filters = get(this, 'fileFilters') || {};\n      keys(filters).forEach((filter) => {\n        if (get(this, filter)) {\n          config.filters[filter] = get(this, filter);\n        }\n      });\n\n      if (isDragAndDropSupported(get(this, 'runtimes'))) {\n        config.drop_element = get(this, 'dropzone.id');\n      }\n\n      if (get(this, 'extensions.length')) {\n        config.filters.mime_types = [{\n          extensions: get(this, 'extensions').map(function (ext) {\n            return ext.toLowerCase();\n          }).join(',')\n        }];\n      }\n\n      return config;\n    }\n  }),\n\n  didInsertElement: Ember.on('didInsertElement', function() {\n    Ember.run.scheduleOnce('afterRender', this, 'attachUploader');\n    Ember.run.scheduleOnce('afterRender', this, 'setupDragListeners');\n  }),\n\n  attachUploader() {\n    var uploader = get(this, 'uploader');\n    var queue = uploader.findOrCreate(get(this, 'name'), this, get(this, 'config'));\n    set(this, 'queue', queue);\n\n    // Send up the pluploader object so the app implementing this component as has access to it\n    var pluploader = queue.get('queues.firstObject');\n    this.sendAction('onInitOfUploader', pluploader);\n    this._dragInProgress = false;\n    this._invalidateDragData();\n  },\n\n  setupDragListeners() {\n    var dropzoneId = get(this, 'dropzone.id');\n    if (dropzoneId) {\n      var handlers = this.eventHandlers = {\n        dragenter: bind(this, 'enteredDropzone'),\n        dragleave: bind(this, 'leftDropzone')\n      };\n\n      keys(handlers).forEach(function (key) {\n        Ember.$(document).on(key, '#' + dropzoneId, handlers[key]);\n      });\n    }\n  },\n\n  detachUploader: Ember.on('willDestroyElement', function () {\n    var queue = get(this, 'queue');\n    if (queue) {\n      queue.orphan();\n      set(this, 'queue', null);\n    }\n    let sheet = sharedStyleSheet();\n    sheet.css(`#${get(this, 'dropzone.id')} *`, null);\n    sheet.applyStyles();\n  }),\n\n  teardownDragListeners: Ember.on('willDestroyElement', function () {\n    var dropzoneId = get(this, 'dropzone.id');\n    if (dropzoneId) {\n      var handlers = this.eventHandlers;\n      keys(handlers).forEach(function (key) {\n        Ember.$(document).off(key, '#' + dropzoneId, handlers[key]);\n      });\n      this.eventHandlers = null;\n    }\n  }),\n\n  dragData: null,\n  enteredDropzone({ originalEvent: evt }) {\n    if (this._dragInProgress === false) {\n        this._dragInProgress = true;\n        this.activateDropzone(evt);\n    }\n  },\n\n  leftDropzone() {\n    if (this._dragInProgress === true) {\n      this._dragInProgress = false;\n      this.deactivateDropzone();\n    }\n  },\n\n  activateDropzone(evt) {\n    let sheet = sharedStyleSheet();\n    sheet.css(`#${get(this, 'dropzone.id')} *`, {\n      pointerEvents: 'none'\n    });\n    Ember.run.scheduleOnce('render', sheet, 'applyStyles');\n    set(this, 'dragData', get(evt, 'dataTransfer'));\n  },\n\n  deactivateDropzone() {\n    let sheet = sharedStyleSheet();\n    sheet.css(`#${get(this, 'dropzone.id')} *`, null);\n    Ember.run.scheduleOnce('render', sheet, 'applyStyles');\n\n    this._dragInProgress = false;\n    set(this, 'dragData', null);\n  },\n\n  _invalidateDragData: Ember.observer('queue.length', function () {\n    // Looks like someone dropped a file\n    const filesAdded = get(this, 'queue.length') > this._queued;\n    const filesDropped = get(this, 'queue.length') === this._queued;\n    if ((filesAdded || filesDropped) && get(this, 'dragData')) {\n      this.deactivateDropzone();\n    }\n    this._queued = get(this, 'queue.length');\n    Ember.run.scheduleOnce('afterRender', this, 'refreshQueue');\n  }),\n\n  refreshQueue() {\n    var queue = this.get('queue');\n\n    if (queue) {\n      queue.refresh();\n    }\n  },\n\n  setDragDataValidity: Ember.observer('dragData', Ember.on('init', function () {\n    if (!isDragAndDropSupported(get(this, 'runtimes'))) { return; }\n\n    var data = get(this, 'dragData');\n    var extensions = get(this, 'extensions');\n    var isValid = true;\n\n    // Validate\n    if (extensions.length) {\n      isValid = slice.call(get(data || {}, 'items') || []).every(function (item) {\n        var fileType = trim(item.type).toLowerCase();\n        return extensions.any(function (ext) {\n          return (new RegExp(ext + '$')).test(fileType);\n        });\n      });\n    }\n\n    if (data) {\n      set(this, 'dropzone.active', true);\n      set(this, 'dropzone.valid', isValid);\n    } else {\n      set(this, 'dropzone.active', false);\n      set(this, 'dropzone.valid', null);\n    }\n  }))\n});\n","/home/travis/build/npmtest/node-npmtest-ember-plupload/node_modules/ember-plupload/addon/computed/w.js":"import Ember from 'ember';\n\nvar w = Ember.String.w;\nvar computed = Ember.computed;\n\nvar toArray = function (value) {\n  if (typeof value === 'string') {\n    value = w(value);\n  }\n  return Ember.A(value);\n};\n\nexport default function(defaultValue) {\n  defaultValue = defaultValue || [];\n  return computed({\n    get() {\n      return toArray(defaultValue);\n    },\n    set(key, value) {\n      return toArray(value);\n    }\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-ember-plupload/node_modules/ember-plupload/addon/services/uploader.js":"import Ember from 'ember';\nimport UploadQueue from '../system/upload-queue';\nimport flatten from '../system/flatten';\n\nvar get = Ember.get;\nvar set = Ember.set;\nvar computed = Ember.computed;\n\nexport default Ember.Service.extend({\n\n  /**\n    @private\n    Setup a map of uploaders so they may be\n    accessed by name via the `find` method.\n   */\n  init() {\n    set(this, 'queues', Ember.Map.create());\n    set(this, 'all', Ember.A());\n  },\n\n  files: computed('all.@each.length', {\n    get() {\n      return flatten(get(this, 'all').invoke('toArray'));\n    }\n  }),\n\n  size: computed('all.@each.size', {\n    get() {\n      return Ember.A(get(this, 'all').getEach('size')).reduce(function (E, x) {\n        return E + x;\n      }, 0);\n    }\n  }),\n\n  loaded: computed('all.@each.loaded', {\n    get() {\n      return Ember.A(get(this, 'all').getEach('loaded')).reduce(function (E, x) {\n        return E + x;\n      }, 0);\n    }\n  }),\n\n  progress: Ember.computed('size', 'loaded', function () {\n    let percent = get(this, 'loaded') / get(this, 'size') || 0;\n    return Math.floor(percent * 100);\n  }),\n\n  /**\n    Return or instantiate a new plupload instance\n    for an upload queue.\n\n    @method find\n    @param {String} name The name of the queue to find\n    @param {Object} [config] The configuration to use for the uploader\n   */\n  findOrCreate(name, component, config) {\n    var queue;\n\n    if (get(this, 'queues').has(name)) {\n      queue = get(this, 'queues').get(name);\n      if (config != null) {\n        set(queue, 'target', component);\n        queue.configure(config);\n      }\n    } else {\n      queue = UploadQueue.create({\n        name: name,\n        target: component\n      });\n      get(this, 'all').pushObject(queue);\n      get(this, 'queues').set(name, queue);\n      queue.configure(config);\n    }\n    return queue;\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-plupload/node_modules/ember-plupload/addon/system/file.js":"/* global mOxie, plupload */\nimport Ember from 'ember';\n\nconst get = Ember.get;\nconst alias = Ember.computed.alias;\nconst reads = Ember.computed.reads;\n\nconst RSVP = Ember.RSVP;\nconst mOxieFileReader = function () {\n  return new mOxie.FileReader();\n};\n\nconst keys = Object.keys;\nconst computed = Ember.computed;\n\nconst mergeDefaults = function (defaults, options) {\n  const unsetKeys = Ember.A(keys(defaults)).removeObjects(keys(options));\n  const settings = Ember.copy(options, true);\n\n  for (let i = 0, len = unsetKeys.length; i < len; i++) {\n    let key = unsetKeys[i];\n    settings[key] = defaults[key];\n  }\n  return settings;\n};\n\nconst settingsToConfig = function (settings) {\n  let {\n    url, method, accepts, contentType, headers,\n    data, maxRetries, chunkSize, multipart, fileKey\n  } = mergeDefaults({\n    method: 'POST',\n    accepts: ['application/json', 'text/javascript'],\n    contentType: get(this, 'type'),\n    headers: {},\n    data: {},\n    maxRetries: 0,\n    chunkSize: 0,\n    multipart: true,\n    fileKey: 'file'\n  }, settings);\n\n  if (headers.Accept == null) {\n    if (!Ember.Array.detect(accepts)) {\n      accepts = Ember.A([accepts]).compact();\n    }\n    headers.Accept = accepts.join(',');\n  }\n\n  // Switch setting content type according to\n  // the type of request we're sending.\n  if (contentType) {\n    if (multipart) {\n      data['Content-Type'] = contentType;\n    } else {\n      headers['Content-Type'] = contentType;\n    }\n  }\n\n  return {\n    url: url,\n    method: method,\n    headers: headers,\n    multipart: multipart,\n    multipart_params: data,\n    max_retries: maxRetries,\n    chunk_size: chunkSize,\n    file_data_name: fileKey\n  };\n};\n\n/**\n  A representation of a single file being uploaded\n  by the `UploadQueue`.\n\n  @namespace ember-plupload\n  @class File\n  @extends Ember.Object\n */\nexport default Ember.Object.extend({\n\n  /**\n    The unique ID of the file.\n\n    @property id\n    @type String\n   */\n  id: reads('file.id'),\n\n  /**\n    The name of the file.\n\n    @property name\n    @type String\n   */\n  name: alias('file.name'),\n\n  /**\n    The size of the file in bytes\n\n    @property size\n    @type Number\n   */\n  size: reads('file.size'),\n\n  /**\n    The content type of the file\n\n    @property type\n    @type String\n   */\n  type: reads('file.type'),\n\n  /**\n    The current upload progress of the file,\n    which is a number between 0 and 100.\n\n    @property progress\n    @type Number\n   */\n  progress: computed({\n    get() {\n      return get(this, 'file.percent');\n    }\n  }),\n\n  /**\n    Remove the file from the upload queue.\n\n    @method destroy\n   */\n  destroy() {\n    this._super(...arguments);\n    get(this, 'uploader').removeFile(get(this, 'file'));\n  },\n\n  upload(url, settings) {\n    var uploader = get(this, 'uploader');\n    this._deferred = RSVP.defer(`File: '${get(this, 'id')}' Upload file`);\n\n    if (settings == null) {\n      if (typeof url === 'object') {\n        settings = url;\n      } else {\n        settings = { url };\n      }\n    } else if (url) {\n      settings.url = url;\n    }\n\n    this.settings = settingsToConfig.call(this, settings);\n\n    // Handle future versions of plupload with\n    // a parallel upload api provided on the file object\n    if (this.file.upload) {\n      this.file.upload(this.settings);\n    } else {\n      if (this.file.status === plupload.FAILED) {\n        this.file.status = plupload.QUEUED;\n      }\n      if (this.get('queue').every((f) => f.settings)) {\n        uploader.start();\n      }\n    }\n\n    return this._deferred.promise;\n  },\n\n  read(options = { as: 'data-url' }) {\n    let file = get(this, 'file').getSource();\n    /*jshint -W055 */\n    let reader = mOxieFileReader();\n    /*jshint +W055 */\n    let { promise, resolve, reject } = RSVP.defer();\n    reader.onloadend = resolve;\n    reader.onerror = reject;\n\n    switch (options.as) {\n    case 'array-buffer':\n      reader.readAsArrayBuffer(file);\n      break;\n    case 'data-url':\n      reader.readAsDataURL(file);\n      break;\n    case 'binary-string':\n      reader.readAsBinaryString(file);\n      break;\n    case 'text':\n      reader.readAsText(file);\n      break;\n    }\n\n    return promise.then(function () {\n      return reader.result;\n    }, function () {\n      return RSVP.reject(reader.error);\n    });\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-plupload/node_modules/ember-plupload/addon/system/flatten.js":"import Ember from 'ember';\n\nfunction flatten(array) {\n  var flattened = [];\n  for (let i = 0, len = array.length; i < len; i++) {\n    let value = array[i];\n    if (Ember.isArray(value)) {\n      flattened.push(...flatten(value));\n    } else {\n      flattened.push(value);\n    }\n  }\n  return flattened;\n}\n\nexport default flatten;\n","/home/travis/build/npmtest/node-npmtest-ember-plupload/node_modules/ember-plupload/addon/system/make-file-filter.js":"/* global plupload */\nimport Ember from 'ember';\n\nvar RSVP = Ember.RSVP;\n\nexport default function (name, filterBody) {\n  plupload.addFileFilter(name, function (configValue, file, callback) {\n    var deferred = RSVP.defer();\n    var self = this;\n\n    filterBody(configValue, file, deferred.resolve, deferred.reject);\n    deferred.promise.then(function () {\n      callback(true);\n    }, function (code, message) {\n      self.trigger('Error', {\n        code: code,\n        message: message,\n        file: file\n      });\n      callback(false);\n    });\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-ember-plupload/node_modules/ember-plupload/addon/system/sum-by.js":"import Ember from 'ember';\n\nvar get = Ember.get;\n\nexport default function (target, key) {\n  return Ember.A(target).reduce(function (E, obj) {\n    return E + get(obj, key);\n  }, 0);\n}\n","/home/travis/build/npmtest/node-npmtest-ember-plupload/node_modules/ember-plupload/addon/system/trim.js":"var trim;\n\nif (String.prototype.trim) {\n  trim = function (string) {\n    return (string || '').trim();\n  };\n} else {\n  // Make sure we trim BOM and NBSP\n  var rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n  trim = function (string) {\n    return (string || '').replace(rtrim, '');\n  };\n}\n\nexport default trim;\n","/home/travis/build/npmtest/node-npmtest-ember-plupload/node_modules/ember-plupload/addon/system/upload-queue.js":"/* globals plupload, mOxie */\nimport Ember from 'ember';\nimport File from './file';\nimport trim from './trim';\nimport sumBy from '../system/sum-by';\n\nconst { get, set } = Ember;\nconst { copy, merge } = Ember;\nconst computed = Ember.computed;\nconst bool = Ember.computed.bool;\nconst bind = Ember.run.bind;\nconst keys = Object.keys;\n\nvar getHeader = function (headers, header) {\n  let headerKeys = Ember.A(keys(headers));\n  let headerIdx = headerKeys.map((s) => s.toLowerCase()).indexOf(header.toLowerCase());\n  if (headerIdx !== -1) {\n    return headers[headerKeys[headerIdx]];\n  }\n  return null;\n};\n\n/**\n\n  @namespace ember-plupload\n  @class UploadQueue\n  @extend Ember.ArrayProxy\n */\nexport default Ember.ArrayProxy.extend({\n\n  name: null,\n\n  uploading: bool('length'),\n\n  queues: null,\n\n  init() {\n    set(this, 'queues', Ember.A([]));\n    set(this, 'orphanedQueues', Ember.A([]));\n\n    set(this, 'content', Ember.A([]));\n    this._super();\n  },\n\n  configure(config = {}) {\n    if (config.browse_button) {\n      Ember.assert(`An element with the id \"${config.browse_button}\" is needed to match the uploader\\'s for attribute.`, document.getElementById(config.browse_button));\n    }\n\n    var uploader = new plupload.Uploader(config);\n\n    uploader.bind('Init',           bind(this, 'runtimeDidChange'));\n    uploader.bind('FilesAdded',     bind(this, 'filesAdded'));\n    uploader.bind('FilesRemoved',   bind(this, 'filesRemoved'));\n    uploader.bind('BeforeUpload',   bind(this, 'configureUpload'));\n    uploader.bind('UploadProgress', bind(this, 'progressDidChange'));\n    uploader.bind('FileUploaded',   bind(this, 'fileUploaded'));\n    uploader.bind('UploadComplete', bind(this, 'uploadComplete'));\n    uploader.bind('Error',          bind(this, 'onError'));\n\n    get(this, 'queues').pushObject(uploader);\n\n    // Set browse_button and drop_element as\n    // references to the buttons so mOxie doesn't\n    // get confused when the dom might be detached\n    uploader.settings.browse_button = [config.browse_button];\n    if (config.drop_element) {\n      uploader.settings.drop_element = [config.drop_element];\n    }\n\n    let settings = copy(uploader.settings);\n    delete settings.url;\n    set(this, 'settings', settings);\n\n    uploader.init();\n    return uploader;\n  },\n\n  runtimeDidChange() {\n    let $input = get(this, 'target').$('.moxie-shim input');\n    let ruid = $input.attr('id');\n    let I = mOxie.Runtime.getInfo(ruid);\n\n    // Polyfill mobile support\n    if (!I.can('summon_file_dialog')) {\n      $input.attr('capture', 'camera');\n    }\n  },\n\n  /**\n    Orphan the active plupload object so\n    we garbage collect the queues.\n   */\n  orphan() {\n    var orphans = get(this, 'orphanedQueues');\n    var activeQueues = get(this, 'queues').filter(function (queue) {\n      return orphans.indexOf(queue) === -1;\n    });\n    var freshestQueue = get(Ember.A(activeQueues), 'lastObject');\n    if (get(freshestQueue, 'total.queued') > 0) {\n      orphans.pushObject(freshestQueue);\n    } else {\n      this.garbageCollectUploader(freshestQueue);\n    }\n  },\n\n  destroy() {\n    this._super();\n    get(this, 'queues').invoke('unbindAll');\n    set(this, 'content', Ember.A([]));\n    set(this, 'queues', null);\n  },\n\n  refresh() {\n    get(this, 'queues').invoke('refresh');\n  },\n\n  size: computed({\n    get: function _get() {\n      return sumBy(get(this, 'queues'), 'total.size') || 0;\n    }\n  }),\n\n  loaded: computed({\n    get: function _get() {\n      return sumBy(get(this, 'queues'), 'total.loaded') || 0;\n    }\n  }),\n\n  progress: computed('size', 'loaded', {\n    get: function _get() {\n      let percent = get(this, 'loaded') / get(this, 'size') || 0;\n      return Math.floor(percent * 100);\n    }\n  }),\n\n  filesAdded(uploader, files) {\n    for (let i = 0, len = files.length; i < len; i++) {\n      var file = File.create({\n        uploader: uploader,\n        file: files[i],\n        queue: this\n      });\n\n      this.pushObject(file);\n      get(this, 'target').sendAction('onfileadd', file, {\n        name: get(this, 'name'),\n        uploader: uploader,\n        queue: this\n      });\n\n      this.notifyPropertyChange('size');\n      this.notifyPropertyChange('loaded');\n    }\n  },\n\n  filesRemoved(uploader, files) {\n    for (var i = 0, len = files.length; i < len; i++) {\n      var file = this.findBy('id', files[i].id);\n      if (file) {\n        this.removeObject(file);\n      }\n    }\n\n    this.notifyPropertyChange('size');\n    this.notifyPropertyChange('loaded');\n  },\n\n  configureUpload(uploader, file) {\n    file = this.findBy('id', file.id);\n    // Reset settings for merging\n    uploader.settings = copy(get(this, 'settings'));\n    merge(uploader.settings, file.settings);\n\n    this.progressDidChange(uploader, file);\n  },\n\n  progressDidChange(uploader, file) {\n    file = this.findBy('id', file.id);\n    if (file) {\n      file.notifyPropertyChange('progress');\n    }\n\n    this.notifyPropertyChange('size');\n    this.notifyPropertyChange('loaded');\n  },\n\n  parseResponse(response) {\n    var body = trim(response.response);\n    var rawHeaders = Ember.A(response.responseHeaders.split(/\\n|\\r/)).without('');\n    var headers = rawHeaders.reduce(function (E, header) {\n      var parts = header.split(/^([0-9A-Za-z_-]*:)/);\n      if (parts.length > 0){\n        E[parts[1].slice(0, -1)] = trim(parts[2]);\n      }\n      return E;\n    }, {});\n\n    let contentType = (getHeader(headers, 'Content-Type') || '').split(';');\n    // Parse body according to the Content-Type received by the server\n    if (contentType.indexOf('text/html') !== -1) {\n      body = Ember.$.parseHTML(body);\n    } else if (contentType.indexOf('text/xml') !== -1) {\n      body = Ember.$.parseXML(body);\n    } else if (contentType.indexOf('application/json') !== -1 ||\n               contentType.indexOf('text/javascript') !== -1 ||\n               contentType.indexOf('application/javascript') !== -1) {\n      body = Ember.$.parseJSON(body);\n    }\n\n    return {\n      status: response.status,\n      body: body,\n      headers: headers\n    };\n  },\n\n  fileUploaded(uploader, file, response) {\n    var results = this.parseResponse(response);\n    file = this.findBy('id', file.id);\n    if (file) {\n      this.removeObject(file);\n    }\n\n    // NOTE: Plupload calls UploadProgress upon triggering FileUploaded,\n    //       so we don't need to trigger a progress event\n    if (Math.floor(results.status / 200) === 1) {\n      file._deferred.resolve(results);\n    } else {\n      file._deferred.reject(results);\n    }\n\n    // Notify plupload that our browse_button may have\n    // changed locations\n    Ember.run.later(uploader, 'refresh', 750);\n  },\n\n  garbageCollectUploader(uploader) {\n    get(this, 'queues').removeObject(uploader);\n    get(this, 'orphanedQueues').removeObject(uploader);\n    this.filterBy('uploader', uploader).invoke('destroy');\n    uploader.unbindAll();\n  },\n\n  uploadComplete(uploader) {\n    // Notify plupload that our browse_button may have\n    // changed locations\n    Ember.run.later(uploader, 'refresh', 750);\n    this.notifyPropertyChange('loaded');\n    this.notifyPropertyChange('size');\n\n    // Clean up the orphaned uploader and its files\n    if (get(this, 'orphanedQueues').indexOf(uploader) !== -1) {\n      this.garbageCollectUploader(uploader);\n    }\n  },\n\n  onError(uploader, error) {\n    if (error.file) {\n      var file = this.findBy('id', error.file.id);\n      if (file == null) {\n        file = File.create({\n          uploader: uploader,\n          file: error.file\n        });\n      }\n\n      set(file, 'error', error);\n\n      if (file._deferred) {\n        file._deferred.reject(error);\n\n      // This happended before the file got queued,\n      // So we need to stub out `upload` and trigger\n      // the queued event\n      } else {\n        file.upload = file.read = function () {\n          Ember.run.debounce(uploader, 'refresh', 750);\n          return Ember.RSVP.reject(error, `File: '${error.file.id}' ${error.message}`);\n        };\n        if (file) {\n          file.destroy();\n        }\n\n        get(this, 'target').sendAction('onfileadd', file, {\n          name: get(this, 'name'),\n          uploader: uploader,\n          queue: this\n        });\n      }\n      this.notifyPropertyChange('length');\n      Ember.run.debounce(uploader, 'refresh', 750);\n    } else {\n      set(this, 'error', error);\n      get(this, 'target').sendAction('onerror', error);\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-plupload/node_modules/ember-plupload/app/components/pl-uploader.js":"import PlUploader from 'ember-plupload/components/pl-uploader';\nimport config from '../config/environment';\n\nexport default PlUploader.extend({\n  BASE_URL: config.PLUPLOAD_BASE_URL || '/assets/'\n});\n","/home/travis/build/npmtest/node-npmtest-ember-plupload/node_modules/ember-plupload/app/initializers/pl-uploader-manager.js":"/*global requirejs */\nimport makeFileFilter from 'ember-plupload/system/make-file-filter';\n\nvar keys = Object.keys;\n\nexport function initialize(app) {\n  if (arguments[1]) { // Ember < 2.1\n    app = arguments[1];\n  }\n\n  var entries = requirejs.entries;\n  var fileFilterPrefix = app.modulePrefix + '/file-filters';\n  var fileFilters = {};\n  keys(entries).forEach(function (key) {\n\n    if (key.indexOf(fileFilterPrefix) === 0) {\n      var filterName = key.split('/').slice(-1);\n      var module = require(key, null, null, true);\n      if (module) {\n        fileFilters[filterName] = module.default;\n        makeFileFilter(filterName, module.default);\n        app.register('file-filter:' + filterName, module.default, { instantiate: false });\n      }\n    }\n  });\n\n  app.register('app:file-filters', fileFilters, { instantiate: false });\n  app.inject('component:pl-uploader', 'fileFilters', 'app:file-filters');\n}\n\nexport default {\n  name: 'pl-uploader',\n  initialize: initialize\n};\n","/home/travis/build/npmtest/node-npmtest-ember-plupload/node_modules/ember-plupload/app/services/uploader.js":"import Uploader from 'ember-plupload/services/uploader';\nexport default Uploader;\n\n"}